<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:security="http://www.springframework.org/schema/security"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
           xsi:schemaLocation="
                http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
                http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
                http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0 http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.1.0.xsd"
           default-timeout="20000"
           default-activation="lazy">

  <!-- START: Configuration -->
  <cm:property-placeholder persistent-id="custom-authentication"
                           update-strategy="reload">
    <cm:default-properties>
      <cm:property name="custom.id" value="custom"/>
      <cm:property name="jdbc.driver" value="org.postgresql.Driver"/>
      <cm:property name="jdbc.url" value="jdbc:postgresql://localhost:5432/hibernate"/>
      <cm:property name="jdbc.username" value="hibuser"/>
      <cm:property name="jdbc.password" value="password"/>
      <cm:property name="hibernate.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/>
    </cm:default-properties>
  </cm:property-placeholder>
  <!-- END: Configuration -->

  <!-- ================================================================================================== -->
  <!-- SPRING 4 PROXY WRAPPING REQUESTS                                                                   -->
  <!-- ================================================================================================== -->

  <service auto-export="interfaces">
    <bean class="org.pentaho.platform.proxy.impl.ProxyRequestRegistration">
      <argument value="org.springframework.security.core.userdetails.UserDetailsService" />
    </bean>
  </service>

  <service auto-export="interfaces">
    <bean class="org.pentaho.platform.proxy.impl.ProxyRequestRegistration">
      <argument value="org.springframework.security.authentication.AuthenticationProvider" />
    </bean>
  </service>


  <!-- ================================== -->
  <!-- AUTHENTICATION INTERFACE EXPORTS   -->
  <!-- ================================== -->

  <service ref="customAuthenticationProvider" interface="org.springframework.security.authentication.AuthenticationProvider">
    <service-properties><entry key="providerName" value="${custom.id}" /></service-properties>
  </service>

  <service ref="customUserDetailsService" interface="org.springframework.security.core.userdetails.UserDetailsService">
    <service-properties><entry key="providerName" value="${custom.id}" /></service-properties>
  </service>

  <service ref="customUserRoleListService" interface="org.pentaho.platform.api.engine.IUserRoleListService">
    <service-properties><entry key="providerName" value="${custom.id}" /></service-properties>
  </service>


  <!-- ================================================================================================== -->
  <!-- UserDetailsService, UserRoleListService and AuthenticationProvider                                 -->
  <!-- ================================================================================================== -->

  <reference id="defaultRole" interface="java.lang.String" filter="(id=defaultRole)"/>
  <reference id="userNameUtils" interface="org.pentaho.platform.api.mt.ITenantedPrincipleNameResolver" filter="(id=tenantedUserNameUtils)"/>
  <reference id="roleNameUtils" interface="org.pentaho.platform.api.mt.ITenantedPrincipleNameResolver" filter="(id=tenantedRoleNameUtils)"/>

  <bean id="customUserDetailsService" class="org.pentaho.custom.authentication.provider.service.CustomUserDetailsService">
    <property name="userRoleDao"     ref="hibernateUserRoleDao" />
    <property name="userNameUtils"   ref="userNameUtils" />
    <property name="defaultRole"     ref="defaultRole" />
  </bean>

  <bean id="customUserRoleListService" class="org.pentaho.custom.authentication.provider.service.CustomUserDetailsService">
    <property name="defaultRole"       ref="defaultRole" />
    <property name="userRoleDao"       ref="hibernateUserRoleDao" />
    <property name="userNameUtils"     ref="userNameUtils" />
    <property name="roleNameUtils"     ref="roleNameUtils" />
  </bean>

  <bean id="customAuthenticationProvider" class="org.springframework.security.providers.dao.DaoAuthenticationProvider">
    <property name="userDetailsService"       ref="customUserDetailsService" />
    <property name="passwordEncoder"          ref="customPasswordEncoder" />
  </bean>
  

  <!--***************************** -->
  <!--  CUSTOM AUTHENTICATION BEANS -->
  <!-- **************************** -->
    
  <!--  Created a simple Base64Password Encoder for encoding password for the users -->  
  <bean id="customPasswordEncoder"
    class="org.pentaho.platform.authentication.hibernate.Base64PasswordEncoder" />



  <!-- IUserRoleDao implementation -->
  <bean id="hibernateUserRoleDao" class="org.pentaho.platform.authentication.hibernate.HibernateUserRoleDao"
    init-method="init">
    <property name="sessionFactory" ref="sessionFactory"/>
    <property name="initHandler" ref="initHandler"/>
  </bean>

   <!-- detects if USERS table is empty and if so, inserts sample users and roles -->
   <bean id="initHandler" class="org.pentaho.platform.authentication.hibernate.sample.SampleUsersAndRolesInitHandler">
     <property name="sessionFactory" ref="sessionFactory"/>
     <property name="userRoleDao" ref="txnUserRoleDao"/>
   </bean>
  <!-- an IUserRoleDao that decorates another IUserRoleDao with transactions -->
  <bean id="txnUserRoleDao" class="org.pentaho.platform.authentication.hibernate.UserRoleDaoTransactionDecorator">
    <property name="userRoleDao" ref="hibernateUserRoleDao"/>
    <property name="transactionTemplate" ref="transactionTemplate"/>
  </bean>

  <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
      <property name="propagationBehaviorName" value="PROPAGATION_REQUIRES_NEW" />
      <property name="transactionManager" ref="hibernateTransactionManager"/>
  </bean>

  <bean id="hibernateTransactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
     <property name="sessionFactory" ref="sessionFactory"/>
  </bean>  
  <!-- session factory containing mapping files and config properties -->
  <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
    <property name="mappingResources">
      <list>
        <value>CustomUser.hbm.xml</value>
        <value>CustomRole.hbm.xml</value>
      </list>
    </property>
    <property name="hibernateProperties">
      <props>
        <prop key="hibernate.connection.driver_class">${jdbc.driver}</prop>
        <prop key="hibernate.connection.url">${jdbc.url}</prop>
        <prop key="hibernate.connection.username">${jdbc.username}</prop>
        <prop key="hibernate.connection.password">${jdbc.password}</prop>
        <prop key="hibernate.dialect">${hibernate.dialect}</prop>
        <prop key="hibernate.hbm2ddl.auto">update</prop>
        <prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.SingletonEhCacheProvider</prop>
        <prop key="hibernate.generate_statistics">true</prop>
        <prop key="hibernate.cache.use_query_cache">true</prop>
        <prop key="hibernate.show_sql">false</prop>
        <prop key="hibernate.connection.pool_size">10</prop>
      </props>
    </property>
  </bean>


</blueprint>
